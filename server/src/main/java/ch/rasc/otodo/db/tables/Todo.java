/*
 * This file is generated by jOOQ.
 */
package ch.rasc.otodo.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.otodo.db.DefaultSchema;
import ch.rasc.otodo.db.Indexes;
import ch.rasc.otodo.db.Keys;
import ch.rasc.otodo.db.tables.records.TodoRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.12.3" },
    comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Todo extends TableImpl<TodoRecord> {

  private static final long serialVersionUID = -1072986096;

  /**
   * The reference instance of <code>todo</code>
   */
  public static final Todo TODO = new Todo();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<TodoRecord> getRecordType() {
    return TodoRecord.class;
  }

  /**
   * The column <code>todo.id</code>.
   */
  public final TableField<TodoRecord, Long> ID = createField(DSL.name("id"),
      org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

  /**
   * The column <code>todo.subject</code>.
   */
  public final TableField<TodoRecord, String> SUBJECT = createField(DSL.name("subject"),
      org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

  /**
   * The column <code>todo.description</code>.
   */
  public final TableField<TodoRecord, String> DESCRIPTION = createField(
      DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(
          org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)),
      this, "");

  /**
   * The column <code>todo.app_user_id</code>.
   */
  public final TableField<TodoRecord, Long> APP_USER_ID = createField(
      DSL.name("app_user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this,
      "");

  /**
   * The column <code>todo.updated</code>.
   */
  public final TableField<TodoRecord, LocalDateTime> UPDATED = createField(
      DSL.name("updated"),
      org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false)
          .defaultValue(org.jooq.impl.DSL.field("current_timestamp()",
              org.jooq.impl.SQLDataType.LOCALDATETIME)),
      this, "");

  /**
   * Create a <code>todo</code> table reference
   */
  public Todo() {
    this(DSL.name("todo"), null);
  }

  /**
   * Create an aliased <code>todo</code> table reference
   */
  public Todo(String alias) {
    this(DSL.name(alias), TODO);
  }

  /**
   * Create an aliased <code>todo</code> table reference
   */
  public Todo(Name alias) {
    this(alias, TODO);
  }

  private Todo(Name alias, Table<TodoRecord> aliased) {
    this(alias, aliased, null);
  }

  private Todo(Name alias, Table<TodoRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Todo(Table<O> child, ForeignKey<O, TodoRecord> key) {
    super(child, key, TODO);
  }

  @Override
  public Schema getSchema() {
    return DefaultSchema.DEFAULT_SCHEMA;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.TODO_APP_USER_ID, Indexes.TODO_PRIMARY);
  }

  @Override
  public Identity<TodoRecord, Long> getIdentity() {
    return Keys.IDENTITY_TODO;
  }

  @Override
  public UniqueKey<TodoRecord> getPrimaryKey() {
    return Keys.KEY_TODO_PRIMARY;
  }

  @Override
  public List<UniqueKey<TodoRecord>> getKeys() {
    return Arrays.<UniqueKey<TodoRecord>>asList(Keys.KEY_TODO_PRIMARY);
  }

  @Override
  public List<ForeignKey<TodoRecord, ?>> getReferences() {
    return Arrays.<ForeignKey<TodoRecord, ?>>asList(Keys.TODO_IBFK_1);
  }

  public AppUser appUser() {
    return new AppUser(this, Keys.TODO_IBFK_1);
  }

  @Override
  public Todo as(String alias) {
    return new Todo(DSL.name(alias), this);
  }

  @Override
  public Todo as(Name alias) {
    return new Todo(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Todo rename(String name) {
    return new Todo(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Todo rename(Name name) {
    return new Todo(name, null);
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row5<Long, String, String, Long, LocalDateTime> fieldsRow() {
    return (Row5) super.fieldsRow();
  }
}
